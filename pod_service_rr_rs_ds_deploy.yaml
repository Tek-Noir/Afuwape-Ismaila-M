kubectl apply -f dip/recreate.yml --dry-run=true
kubectl config set-context --current --namespace=uat
kubectl create ns uat
kubectl scale rs myapp-rs --replicas 6
kubectl delete pod/webapp-rr-8p22f pod/webapp-rr-gggkg
kubectl get svc -o wide

# declerative to make namespace
apiVersion: v1
kind: Namespace
metadata:
  name: dev

#=========================================1===============================================
#POD & SERVICE for maven-web-app 
#vi cd manifests/app.yml

apiVersion: v1
kind: Pod
metadata:
  name: mavenapp-pod
  labels:
    app: mavenapp
spec:
  containers:
  - name: mavenapp-c
    image: mylandmarktech/maven-web-app
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: mavenappsvc
spec:
  selector:
    app: mavenapp
  ports:
  - port: 80
    targetPort: 8080

#==========================================2==============================================
#Pod for nodejs-app:1 with tag 1 for PRIVATE DOCKER REPO
#vi cd manifests/nodeapp.yml
apiVersion: v1
kind: Pod
metadata:
  name: nodeapp
  labels:
    app: nodeapp
spec:
  containers:
  - name: nodeappc
    image: mylandmarktech/nodejs-fe-app:1
    ports:
    - containerPort: 9981
  imagePullSecrets:
  - name: dhcred


#==========================================3==============================================
#POD, SERVICE & ClusterIP for java-web-app & hello app. 
#vi cd cm-manifest/pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  namespace: dev
  labels:
    app: webapp
spec:
  containers:
  - name: webapp-c
    image: mylandmarktech/java-web-app
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  namespace: dev
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-c
    image: mylandmarktech/hello
    ports:
    - containerPort: 80
---

#vi cd cm-manifest/ss.yml
apiVersion: v1
kind: Service
metadata:
  name: websvc
  namespace: dev
spec:
  type: ClusterIP
  selector:
    app: webapp
  ports:
   - targetPort: 8080
     port: 80

#=========================================4===============================================
#POD & SERVICE for ISMAILA maven-web-app  
#vi cd cm-manifest/pod1.yml

apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  namespace: dev
  labels:
    app: webapp
spec:
  containers:
  - name: webapp-c
    image: ismailaafuwape/maven-web-app
    ports:
    - containerPort: 8080



#=========================================5===============================================
#Pod & ClusterIP Service for java-web-app
#vi cd cm-manifest/svc.yml

apiVersion: v1
kind: Service
metadata:
  name: websvc
  namespace: dev
spec:
  type: ClusterIP
  selector:
    app: webapp
  ports:
   - targetPort: 8080
     port: 80
---

apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  namespace: dev
  labels:
    app: webapp
spec:
  containers:
  - name: webapp-c
    image: mylandmarktech/java-web-app
    ports:
    - containerPort: 8080

#==========================================6==============================================
#DaemonSet for nodejs-app:1 with tag 1
#vi cd cm-manifest/ds.yml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: webappds
spec:
  selector:
    matchLabels:
     app: node-webapp
  template:
    metadata:
      name: webapppod
      labels:
        app: node-webapp
    spec:
      containers:
      - name: webappcontainer
        image: mylandmarktech/nodejs-app:1
        ports:
        - containerPort: 9981
#============================================7============================================
# to confirm begin

#ReplicationController for java-web-app . can use rc.yml
#vi cd cm-manifest/rr.yml

apiVersion: v1
kind: ReplicationController
metadata:
  name: webapp-rr
  namespace: dev
spec:
  replicas: 4
  selector:
    app: webapp
  template:
    metadata:
      name: webapp-pod
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp-c
        image: mylandmarktech/java-web-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: websvc
  namespace: dev
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - targetPort: 8080
    port: 80
    nodePort: 32000
    
# to confirm end        
#===========================================8=============================================

#ReplicaSet & Service for hello app 
#vi cd cm-manifest/rs.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-rs
  labels:
    env: dev
spec:
  replicas: 2
  selector:
    matchLabels:
     app: myapp
  template:
    metadata:
     name: myapp-c
     labels:
       app: myapp
    spec:
      containers:
      - name: web-c
        image: mylandmarktech/hello
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
 name: myapp-svc
spec:
 selector:
  app: myapp
 ports:
 - targetPort: 80
   port: 80
   nodePort: 31500
 type: NodePort

#=========================================9===============================================

#Deployment & Service for springbootapp with mangoDB database
#vi uat-manifest/app.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          ports:
          - containerPort: 8080
          env:
          - name: MONGO_DB_USERNAME
            value: devdb
          - name: MONGO_DB_PASSWORD
            value: devdb@123
          - name: MONGO_DB_HOSTNAME
            value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
  
#vi uat-manifest/mongo.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: hostpathvol
         hostPath:
           path: /tmp/mongodbbkp
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: hostpathvol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

#========================================10================================================

#Deployment & Service for maven-web-app
#vi dip/recreate.yml

kubectl apply -f dip/recreate.yml --dry-run=true
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 4
  selector:
    matchLabels:
      app: mavenapp
  strategy:
    type: Recreate
  template:
    metadata:
      name: mavenapppod
      labels:
        app: mavenapp
    spec:
      containers:
      - name: mavenappcontainer
        image: legah2045/maven-web-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  selector:
    app: mavenapp
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort
  
  #========================================11================================================

#Deployment & Service for spring-boot-mongo--IT SHOULD HAVE HOSTPATH MONGODB DATABASE OR EXTERNAL NFS DATABASE
#vi uat-manifest/app.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          ports:
          - containerPort: 8080
          env:
          - name: MONGO_DB_USERNAME
            value: devdb
          - name: MONGO_DB_PASSWORD
            value: devdb@123
          - name: MONGO_DB_HOSTNAME
            value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer

#vi uat-manifest/mongo.yml
#ReplicaSet & Service for spring-boot-mongo mongodb HOSTPATH DATABASE STORAGE-

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: hostpathvol
         hostPath:
           path: /tmp/dbbkp
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: hostpathvol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017



#vi uat-manifest/nfs.yml
#ReplicaSet for spring-boot-mongo mongodb EFS EC2 EXTERNAL DATABASE STORAGE-

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: nfsvol
         nfs:
           server: 172.31.32.5
           path: /mnt/share
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: nfsvol
           mountPath: /data/db
           
#ClusterIP Service may be needed as well for efs to talk to our application           
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    
#=========================================12===========================================

#vi uat-manifest/mongo.yml
#Deployment App, Service NodePort & ReplicaSet MongoDB NFS, Service ClusterIP  for spring-boot-mongo mongodb NFS DATABASE STORAGE-    
    
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          ports:
          - containerPort: 8080
          env:
          - name: MONGO_DB_USERNAME
            value: devdb
          - name: MONGO_DB_PASSWORD
            value: devdb@123
          - name: MONGO_DB_HOSTNAME
            value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30032
  type: NodePort
---

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: nfsvol
         nfs:
           server: 172.31.32.5
           path: /mnt/share
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: nfsvol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
#=========================================13===PersistentVolume===PersistentVolumeClaim===ClusterLocalStorage=======================
#vi uat-manifest/mongo.yml
#PersistentVolume, PersistentVolumeClaim, ReplicaSet PersitentVolumn ClusterLocalStorage, Service ClusterIP for spring-boot-mongo cluster local k8s storage-    

#Mongo db pod with volums(HOSTPath PV persistent Volumne
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-hostpath
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/kube"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-hostpath
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: hostpath-pv-vol
         persistentVolumeClaim:
           claimName: pvc-hostpath
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: hostpath-pv-vol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    
    #=========================================14===PersistentVolume===PersistentVolumeClaim===ClusterLocalStorage=======================
#vi uat-manifest/mongo.yml
#PersistentVolume, PersistentVolumeClaim, ReplicaSet PersitentVolumn NFS, Service ClusterIP for spring-boot-mongo NFS k8s storage-    

#Mongo db pod with volums(NFS)
#PersistentVolume example with nfs:
#use nfs server ip
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs-pv1
spec:
  storageClassName: manual
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 172.31.32.5
    path: "/mnt/share"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-nfs-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          ports:
          - containerPort: 8080
          env:
          - name: MONGO_DB_USERNAME
            value: devdb
          - name: MONGO_DB_PASSWORD
            value: devdb@123
          - name: MONGO_DB_HOSTNAME
            value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30032
  type: NodePort
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: nfs-pvc-vol
         persistentVolumeClaim:
            claimName: mongodb-nfs-pvc
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: nfs-pvc-vol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    
    #=========================================15==ConfigMap , Secret=======================      
ConfigMap , Secret, Deployment, NodePort OR LoadBalancer Service for spring-boot-mongo to deploy with MONGODB DATABASE with encrpty credentials was successful.

# first use base 64 to encrpt enviromental variable for value. value is just like password.  then pass the encrpt password inside the Secret yml file as encrpt db-password.
ubuntu@master:~$ echo -n 'devdb@123' | base64
ZGV2ZGJAMTIz
ubuntu@master:~$ kubectl get secret
NAME                  TYPE                                  DATA   AGE
default-token-qz4nc   kubernetes.io/service-account-token   3      4d
mongo-password        Opaque                                1      58m
ubuntu@master:~$ vi uat-manifest/config.yml
ubuntu@master:~$ vi uat-manifest/app.yml

# vi uat-manifest/config.yml
kind: ConfigMap
apiVersion: v1
metadata:
  name: mongo-configmap
data:
  db-username: devdb
---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-password
type: Opaque
stringData:
  db-password: ZGV2ZGJAMTIz


# vi uat-manifest/app.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          ports:
          - containerPort: 8080
          env:
          - name: MONGO_DB_USERNAME
            valueFrom:
                configMapKeyRef:
                  name: mongo-configmap
                  key: db-username
          - name: MONGO_DB_PASSWORD
            valueFrom:
                secretKeyRef:
                  name: mongo-password
                  key: db-password
          - name: MONGO_DB_HOSTNAME
            value: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 32500
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017

---
# ==== OR=======
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
  
#==============================15==ConfigMap , Secret= pass Config mag as a secret  for tomcat-users.xml
# for users to manage tomcat becos we have diff enviroment like dev, uat, production=====NOT-WORKING-BY-PROFF==NEED TO ADJUST CODE=====      
# vi webapp.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: tomcat-users
data:
  tomcat-users.xml:
     <?xml version='1.0' encoding='utf-8'?>

     <tomcat-users xmlns="http://tomcat.apache.org/xml"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xs
                    version="1.0">
     <user username="tomcat" password="tomcat" roles="admin-gui,manager-gui"/>
     </tomcat-users>

apiVersion: v1
kind: ReplicationController
metadata:
  name: app-rc
# namespace: dev
spec:
  replicas: 1
  selector:
    app: javawebapp
  template:
    metadata:
      name: javawebapp-pod
      labels:
        app: javawebapp
    spec:
      volumes:
      - name: tomcat-userconf
      configMap:
      items:
      - key: "tomcat-users.xml"
        path: "tomcat-users.xml"
      containers:
      - name: javawebapp-container
        image: mylandmarktech/java-web-app
        ports:
        - containerPort: 8080

#==============================16==LIFENESS , READINESS and STARTUP PROBES ====NEED TO WORK ON THIS==================================================
# for HEALTH CHECK=====      
# vi probes.yml

apiVersion: v1
kind: ReplicationController
metadata:
  name: app-rc
# namespace: dev
spec:
  replicas: 1
  selector:
    app: javawebapp
  template:
    metadata:
      name: javawebapp-pod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: javawebapp-container
        image: mylandmarktech/java-web-app
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /java-web-app
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /java-web-app
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /java-web-app
            port: 8080
          failureThreshold: 30
          periodSeconds: 10
